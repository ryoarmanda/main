@startuml
!include style.puml
skinparam arrowThickness 1.1
skinparam arrowColor LOGIC_COLOR_T4
skinparam classBackgroundColor LOGIC_COLOR
skinparam lineType ortho


package Logic {

package Parser {
Interface Parser <<Interface>>
Class MooLahParser
Class XYZCommandParser
Class CliSyntax
Class ParserUtil
Class ArgumentMultimap
Class ArgumentTokenizer
Class Prefix
}

package Command {
Class XYZCommand
Class "XYZCommand(Undoable)" as XYZUndoableCommand
Class CommandResult
Class "{abstract}\nUndoableCommand" as UndoableCommand
Class "{abstract}\nCommand" as Command
}

Interface Logic <<Interface>>
Class LogicManager
}

package Model{
Class HiddenModel #FFFFFF
}

Class HiddenOutside #FFFFFF
HiddenOutside ..> Logic

LogicManager .up.|> Logic
LogicManager -->"1" MooLahParser
MooLahParser .left.> XYZCommandParser: creates >

XYZCommandParser .right.> XYZCommand : creates >
XYZCommandParser .right.> XYZUndoableCommand : creates >


XYZCommandParser ..|> Parser
XYZCommandParser ...> ArgumentMultimap
XYZCommandParser ....> ArgumentTokenizer
ArgumentTokenizer .left.> ArgumentMultimap
XYZCommandParser ..> CliSyntax
CliSyntax ..> Prefix
XYZCommandParser ..> ParserUtil
ParserUtil .down.> Prefix
ArgumentTokenizer .down.> Prefix
XYZCommand -up-|> Command
XYZUndoableCommand -up-|> UndoableCommand
UndoableCommand --|> Command

LogicManager .left.> Command : executes >

LogicManager ----> Model
Command ..> Model
note right of XYZCommand: XYZCommand = ListExpensesCommand, \nViewPanelCommand, etc
note right of XYZUndoableCommand: XYZCommand(Undoable) = AddExpenseCommand, \nDeleteExpenseCommand, etc.
Logic ..> CommandResult
LogicManager .down.> CommandResult
Command .up.> CommandResult
CommandResult -[hidden]-> Parser
@enduml
